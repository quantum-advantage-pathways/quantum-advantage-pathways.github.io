name: Validate Submission

on:
  issues:
    types: [opened, edited]

jobs:
  validate:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'submission')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Pathway Assignment
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body || '';
            const labels = issue.labels.map(l => l.name);

            // Determine which pathway this submission is for
            let pathway = null;
            if (labels.includes('pathway: observable-estimations')) {
              pathway = 'observable_estimations';
            } else if (labels.includes('pathway: variational-problems')) {
              pathway = 'variational_problems';
            } else if (labels.includes('pathway: classically-verifiable')) {
              pathway = 'classically_verifiable';
            }

            if (!pathway) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '⚠️ **Validation Warning**: This submission is missing a pathway label. Please ensure you used one of the official issue templates:\n\n- 📊 Observable Estimations Submission\n- ⚛️ Variational Problems Submission\n- ✅ Classically Verifiable Problems Submission'
              });
              return;
            }

            // Add pathway-specific submission label
            const pathwaySubmissionLabels = {
              'observable_estimations': 'Path 1 submission',
              'variational_problems': 'Path 2 submission',
              'classically_verifiable': 'Path 3 submission'
            };

            const pathSubmissionLabel = pathwaySubmissionLabels[pathway];

            // Check if the label already exists on the issue
            if (!labels.includes(pathSubmissionLabel)) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: [pathSubmissionLabel]
              });
            }

            // Extract Circuit ID from the issue body
            const circuitMatch = issueBody.match(/### Circuit\s*\n\s*(.+)/i);
            const circuitId = circuitMatch ? circuitMatch[1].trim() : null;

            if (!circuitId) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '⚠️ **Validation Warning**: Circuit ID is missing from the submission. Please fill in all required fields.'
              });
              return;
            }

            // Check if circuit exists in the correct pathway
            const fs = require('fs');
            const path = require('path');

            const circuitPaths = [
              `problems/${pathway}/${circuitId}.qasm`,
              `problems/${pathway}/${circuitId}.json`
            ];

            let circuitExists = false;
            for (const circuitPath of circuitPaths) {
              if (fs.existsSync(circuitPath)) {
                circuitExists = true;
                break;
              }
            }

            // Check in data directory as well
            const dataPath = `data/paths/${pathway}/problems.json`;
            if (fs.existsSync(dataPath)) {
              const problemsData = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
              const problemExists = problemsData.some(p => p.id === circuitId || p.name === circuitId);
              if (problemExists) {
                circuitExists = true;
              }
            }

            const pathwayNames = {
              'observable_estimations': '📊 Observable Estimations',
              'variational_problems': '⚛️ Variational Problems',
              'classically_verifiable': '✅ Classically Verifiable Problems'
            };

            if (circuitExists) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `✅ **Validation Success**: Submission correctly tagged as **${pathwayNames[pathway]}** (\`${pathSubmissionLabel}\`) and circuit \`${circuitId}\` exists in the repository.\n\n**Applied Labels:**\n- \`${pathSubmissionLabel}\`\n- \`validated\`\n\n**Next Steps:**\n1. Maintainers will review your submission for reproducibility and compliance with validation criteria\n2. Ensure all required fields are filled out\n3. Provide links to papers/code for method verification\n\nThank you for your contribution! 🚀`
              });

              // Add verified label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['validated']
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `⚠️ **Validation Warning**: Circuit \`${circuitId}\` not found in the **${pathwayNames[pathway]}** pathway.\n\n**Applied Labels:**\n- \`${pathSubmissionLabel}\`\n- \`needs-review\`\n\n**Possible Issues:**\n- The circuit ID might be misspelled\n- The circuit might not exist in \`problems/${pathway}/\` directory\n- You may be submitting to the wrong pathway\n\n**What to do:**\n1. Verify the circuit ID is correct\n2. Check the available circuits at: https://quantum-advantage-pathways.github.io/\n3. If this is a new problem, you may need to add the circuit definition first\n4. Ensure you selected the correct pathway template`
              });

              // Add needs-review label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['needs-review']
              });
            }

      - name: Validate Required Fields
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body || '';

            // Check for required fields based on pathway
            const requiredFields = [
              'Circuit',
              'Method',
              'Institution',
              'Quantum Time',
              'Quantum Hardware',
              'Submission Date'
            ];

            const missingFields = [];
            for (const field of requiredFields) {
              const regex = new RegExp(`### ${field}\\s*\\n\\s*(.+)`, 'i');
              const match = issueBody.match(regex);
              if (!match || match[1].trim() === '' || match[1].includes('_No response_')) {
                missingFields.push(field);
              }
            }

            if (missingFields.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `⚠️ **Missing Required Fields**: The following required fields are incomplete:\n\n${missingFields.map(f => `- ${f}`).join('\n')}\n\nPlease edit the issue to complete all required fields.`
              });

              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['incomplete']
              });
            }
